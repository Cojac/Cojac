---------------- A faire (26.05.21) ------------------------------------
- consider removing the very old cojac.perfs benchmarks and the associated
  ugly dependencies (bb.jar, benchmark-utils.jar etc). Maybe port those
  benchmarks to JMH (see cojac.profiler.ProfileBenchmarks for a tentative).
  Or reconsider the general approach for our benchmarks...

- (unknown date) maybe prefer maven-shade-plugin to maven-assembly-plugin (?)

---------------- A faire (15.10.15) ------------------------------------

- rassembler quelques cas d'utilisation dans src/examples
- publication/promotion... faire relayer l'information
  canaux possibles : Heinz Kabutz (java specialists) ?
                     JavaWorld ?
                     autres ? contacts personnels ?...
                     écrire un article ? Pour quelle revue/conférence ?

- méditer le gros problème : invokevirtual/invokeinterface vers des
  méthodes qui auront été instrumentées. Quand l'invocation est dans du code
  non instrumenté, on parlait de "callback". Quand on peut instrumenter l'appel
  on a visé (réussi ?) mieux. Nous tentons de savoir si la méthode-cible est 
  instrumentée ou non (cf. FloatProxyMethod); c'est assez compliqué (moche ?)
- reconsidérer le problème des "callbacks"; peut-on dupliquer toutes les méthodes
  instrumentées avec une méthode passerelle ? D'après [Monnard14, p. 19], 
  "This idea is not implemented but it is not hard to implement it"
- alternativement, on pourrait tenter d'instrumenter "offline" toute la librairie
  standard, ne gardant le proxy que pour les méthodes natives...
- tests automatiques : compléter certains tests unitaires
                       ajouter des tests "crash-or-not" comme Java2Demo
                       mesurer le code coverage de nos tests
- avoir au moins un test de performance (JMH) pour ReplaceFloat
- valider l'approche de collections "riches" (on ne fait plus de conversions
  DoubleWrapper->Double pour des invocations qui demandent des Object. 
  MAIS il y a pourtant des cas spéciaux, p. ex. printf & Cie...) 
- réappliquer correctement la licence sur tous les fichiers
- approfondir le traitement général de invokeDynamic


----------------- Issues for enriched numbers (option -R) --------------

- Verbose mode & interface: interfaces risk to be loaded by the verifier class
  and to not get instrumented.

- Array reference through proxy: The proxy breaks the references with float &
  double arrays. A fix has been done but it does not cover all cases. A test 
  shows the problem in com.github.cojac.unit.replace. The name of the test:
  arrayPassedInNotInstrumentedSideModifiedWithAnOtherMethod

- Native methods: The native methods can be called but they cannot call methods 
  or access to instance or class fields.

- Java reflection: not handled at all...

- Callback: The callback written by the user will be instrumented and will not
  work in uninstrumented part if it uses the float or double types.
  Test example: arraySortedWithUserDefinedComparator
  
  UPDATE (17.08.15, BAP): Java2Demo works pretty well, but there is at least
  one instance of this "callback" issue: somehow a 
  java2d.demos.Fonts.AttributedStr$ScalableImageGraphicAttribute, which extends 
  the uninstrumented abstract class java.awt.font.GraphicAttribute, is created
  and given to swing, which finally tries to call 'float getAdvance()'; this
  won't be found, and we get an AbstractMethodError.
  That particular problem happens to have a workaround via the "bypass" option: 
      -b java2d.demos.Fonts.AttributedStr$ScalableImageGraphicAttribute  
  
  
----------------------- OLDER NOTES (might not be relevant now) --------------
As is, Cojac is built with jdk6.21, then works well with jvm6 or jvm7.
It compiles with jdk7, but some of the tests fail ("missing frame").

Updating ASM to 4.0 doesn't directly help, but will be done soon anyway.

Using COMPUTE_FRAMES instead of COMPUTE_MAXS solves the build/test issue, 
but the result causes sometimes LinkageError at runtime with jvm7. It is
strange, as with the -javaagent mode, the SystemClassLoader is the only 
classloader at runtime (ok, except the bootclassloader). So it seems that
somehow, instrumenting a class C causes another "load class C" event, and that
such "reentrant" class loadings don't get instrumented, and we get 2 versions
of the same class. Just a hypothesis (hinted by 
http://osdir.com/ml/java.objectweb.asm/2007-07/msg00007.html).

I suspect the original problem of failing tests under jdk7 built to have its
root in the various "inserted methods" (log, print...), which asmified bytecode
have been gathered quite a long time ago (jvm5 code?). This should be updated.
